package main

import (
	"fmt"
	"log"
	"net/http"
	"os"

	"database/sql"

	_ "github.com/go-sql-driver/mysql"
)

var db *sql.DB

func initDB() {
	db_user := os.Getenv("MYSQL_USER")
	db_password := os.Getenv("MYSQL_PASSWORD")
	db_port := os.Getenv("MYSQL_PORT")
	db_database := os.Getenv("MYSQL_DATABASE")
	dataSourceName := fmt.Sprintf("%s:%s@tcp(vulnerability-db:%s)/%s?charset=utf8&parseTime=true", db_user, db_password, db_port, db_database)

	var err error
	db, err = sql.Open("mysql", dataSourceName)
	if err != nil {
		panic(err.Error())
	}
	db.SetMaxOpenConns(25)
}

func statusCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(200)
	w.Write([]byte("OK"))
	return
}

func main() {
	initDB()
	stmt, e := db.Prepare("INSERT INTO users(name, password) values(?, ?)")
	if e != nil {
		panic(e.Error())
	}
	defer stmt.Close()

	userHandler := func(w http.ResponseWriter, r *http.Request) {

		name := r.URL.Query().Get("name")
		password := r.URL.Query().Get("password")

		_, _ = stmt.Exec(name, password)

		origin := r.Header.Get("Origin")
		if origin != "" {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Access-Control-Allow-Credentials", "true")
		} else {
			w.Header().Set("Access-Control-Allow-Origin", "*")
		}
		w.Header().Set("Access-Control-Allow-Headers", "Content-Type")
		w.Header().Set("Access-Control-Allow-Methods", "GET")
	}

	http.HandleFunc("/users", userHandler)
	http.HandleFunc("/ok", statusCheck)

	// start server
	if err := http.ListenAndServe(":8080", nil); err != nil {
		log.Fatal(err)
	}
	defer db.Close()
}
