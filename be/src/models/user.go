package models

import (
	"database/sql"
	"fmt"

	. "github.com/shunsuke-tamura/vulnerability-demo/db"
)

type User struct {
	Id       string
	Name     string `json:"name"`
	Password string `json:"password"`
}

func (u *User) Create() error {
	_, err := Db.Exec("insert into users(name, password) values(?, ?)", u.Name, u.Password)
	return err
}

func ReadAllUsers() (*[]User, error) {
	rows, err := Db.Query("select * from users")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var users []User
	for rows.Next() {
		user := User{}
		err = rows.Scan(&user.Id, &user.Name, &user.Password)
		if err != nil {
			return nil, err
		}
		users = append(users, user)
	}
	return &users, err
}

func (u *User) SearchUserByNamePass(isSafe bool) (*User, error) {
	var row *sql.Row
	var query string
	if isSafe {
		// ステークホルダでSQLインジェクション対策をしている
		query = "select * from users where name=? and password=?"
		row = Db.QueryRow(query, u.Name, u.Password)
	} else {
		// 文字列結合する形でクエリを作っているのでSQLインジェクションが可能である
		query = fmt.Sprintf("select * from users where name=\"%s\" and password=\"%s\"", u.Name, u.Password)
		row = Db.QueryRow(query)
	}
	fmt.Printf("User search query: %s\n", query)
	err := row.Err()
	if err != nil {
		return nil, err
	}
	user := User{}
	err = row.Scan(&user.Id, &user.Name, &user.Password)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, nil
		}
		return nil, err
	}
	return &user, err
}
